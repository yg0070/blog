<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows上使用linux子系统(WSL)使用Docker</title>
    <url>/2020/01/06/Windows%E4%B8%8A%E4%BD%BF%E7%94%A8linux%E5%AD%90%E7%B3%BB%E7%BB%9F(WSL)%E4%BD%BF%E7%94%A8Docker/</url>
    <content><![CDATA[<p>本文介绍在<code>Windows</code>下如何使用<code>Docker</code>的两种方式</p>
<p><code>windows Linux子系统 + WLS + Docker for windows</code></p>
<p><code>windows Linux子系统 + WSL + VM虚拟机</code></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在之前使用<code>Docker</code>时一直使用的<code>Docker for windows</code>，然而windows版很多命令并不支持；之后<code>Windows 10</code>出<code>linux</code>子系统后本想终于可以完美解决，可真实测试后发现，现在的版本没有办法在子系统中使用<code>Docker</code> ，虽然可以安装成功但镜像无法启动。之后就想到可否在<code>windows</code>上安装<code>Docker for windows</code>，子系统使用<code>Docker CLI</code>来调用<code>Windows</code>上的<code>Docker</code>服务，经过验证发现可行。但需要开启hyper虚拟化，并且无法再使用vm虚拟机，所以本人最后用了另外一种方式，在虚拟机中安装<code>Docker</code>。</p>
<blockquote>
<p><code>windows Linux子系统 + WLS + Docker for windows</code></p>
</blockquote>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>打开<code>Hyper-V</code>，并打开cpu虚拟化功能</p>
<p>安装<code>Linux</code>子系统(<code>WSL</code>)</p>
<p>安装<code>Docker for Windows</code></p>
<h3 id="1-1-安装Linux子系统-WSL"><a href="#1-1-安装Linux子系统-WSL" class="headerlink" title="1.1 安装Linux子系统(WSL)"></a>1.1 安装Linux子系统(WSL)</h3><p>现在<code>Windows app store</code>上已经有很多<code>Linux</code>子系统提供安装，像<code>Ubuntu</code>，<code>opsnsuse</code>，<code>Centos</code>等，在安装前需要在<code>程序与功能</code>中打开适用于<code>Linux的Windows子系统</code>功能。</p>
<p>如果是企业版<code>windows</code>或者<code>server</code>版没有<code>windows app store</code>，需要查看是否支持子系统功能，如果支持可以手动安装子系统，安装与下载方法参考微软官方文档</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a> </p>
</blockquote>
<p>安装完成后在cmd中输入bash，进入子系统，或者ctrl+r，bash进入</p>
<p>如果想深入了解WSL可查看微软官方文档</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/about" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/wsl/about</a> </p>
</blockquote>
<h3 id="1-2-配置Docker-for-Windows"><a href="#1-2-配置Docker-for-Windows" class="headerlink" title="1.2 配置Docker for Windows"></a>1.2 配置Docker for Windows</h3><p>在<code>Docker</code>设置中需要开启2375端口，以便守护程序在TCP端点上进行侦听。</p>
<p><img src="https://yg0070.github.io/images/image-20200119091957499.png" alt="image-20200119091957499"></p>
<h3 id="1-3-配置WSL"><a href="#1-3-配置WSL" class="headerlink" title="1.3 配置WSL"></a>1.3 配置WSL</h3><p>我们需要在<code>WSL</code>上安装<code>Docker</code>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>

<p>安装完成后配置<code>docker_host</code>连接向<code>docker for windows</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">export DOCKER_HOST=tcp:<span class="comment">//127.0.0.1:2375</span></span><br></pre></td></tr></table></figure>

<p>现在就可正常使用<code>docker</code></p>
<p><img src="https://yg0070.github.io/images/image-20200117154824548.png" alt="image-20200117154824548"></p>
<p>但是改环境变量只会持续到会话结束，每次打开bash都需要重新设置</p>
<p>因此您需要在主目录中的一个名为<code>.bash_profile</code>或者 <code>.bashrc</code>的文件中设置该变量 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">export DOCKER_HOST=tcp:<span class="comment">//127.0.0.1:2375		//ip根据实际修改，参考2.2</span></span><br></pre></td></tr></table></figure>



<p><img src="https://yg0070.github.io/images/image-20200117154852152.png" alt="image-20200117154852152"></p>
<p><img src="https://yg0070.github.io/images/image-20200117154940820.png" alt="image-20200117154940820"></p>
<p>保存后重启bash执行docker祥光命令可以照常执行</p>
<p>第一种方式需要开启<code>hyper</code>，而<code>hyper</code>与<code>vm</code>虚拟机只能启动一个，然而又有需要使用<code>vm</code>的需要，这是就不能使用<code>docker for windows</code>，下面介绍在<code>vm</code>中安装<code>docker</code>来实现。</p>
<blockquote>
<p><code>windows Linux子系统 + WSL + VM虚拟机</code></p>
</blockquote>
<h3 id="2-1-vm中安装linux版docker，配置docker"><a href="#2-1-vm中安装linux版docker，配置docker" class="headerlink" title="2.1 vm中安装linux版docker，配置docker"></a>2.1 vm中安装linux版docker，配置docker</h3><p><code>vm</code>中安装<code>linux</code>就不详述了，自行百度，安装<code>docker</code>也是，都很简单，下面介绍下安装完<code>docker</code>后需要配置哪些东西。</p>
<p>与 1.2 相同，也是需要开启2375端口，对外提供<code>api</code>调用来实现。</p>
<p>自行根据自己<code>linux</code>系统及版本修改以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>ubuntu18.04 路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>打开<code>systemd</code>的<code>docker</code>服务配置文件，在<code>ExecStart</code>中加入以下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>

<p><img src="https://yg0070.github.io/images/image-20200119093742859.png" alt="image-20200119093742859"></p>
<p>修改后保存，刷新配置，重启docker服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload 	<span class="comment">//1.加载docker守护进程</span></span><br><span class="line">systemctl restart docker 	<span class="comment">//2.重启docker服务</span></span><br></pre></td></tr></table></figure>

<p>查看已开启的<code>tcp</code>端口中是否有2375，有的话则证明已配置成功。</p>
<p><img src="https://yg0070.github.io/images/image-20200119094948710.png" alt="image-20200119094948710"></p>
<p>这是<code>docker</code>服务端的配置就完成了，如果没有使用 <code>systemd</code> 工具，自行百度实现方式吧。</p>
<h3 id="2-2-配置WSL"><a href="#2-2-配置WSL" class="headerlink" title="2.2 配置WSL"></a>2.2 配置WSL</h3><p>此步骤与 1.2 相同，ip地址改为虚拟机ip地址，也可设置成固态ip，然后映射到本机端口，依然使用127.0.0.1</p>
<h3 id="2-3-windows环境变量"><a href="#2-3-windows环境变量" class="headerlink" title="2.3 windows环境变量"></a>2.3 windows环境变量</h3><p>如果不想使用<code>linux</code>子系统也可安装<code>docker for windwos</code>, 但不起服务，只是用<code>Docker CLI</code>，在系统环境变量中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量名：DOCKER_HOST</span><br><span class="line">变量值：tcp:<span class="comment">//127.0.0.1:2375	//ip根据实际修改，参考2.2</span></span><br></pre></td></tr></table></figure>

<p>这中方法可实现同样的效果，不过不知是否与<code>linux</code>下的存在差异，可自行决定用哪种方式。</p>
<p><img src="https://yg0070.github.io/images/image-20200119095810699.png" alt="image-20200119095810699"></p>
<h3 id="3-配置cmder"><a href="#3-配置cmder" class="headerlink" title="3. 配置cmder"></a>3. 配置cmder</h3><p>另外，推荐一款<code>windows</code>下代替<code>cmd</code>的工具<code>cmder</code>，毕竟<code>cmd</code>真的很难用，参考下面的文章。</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/5b7c985240a7" target="_blank" rel="noopener">https://www.jianshu.com/p/5b7c985240a7</a> </p>
</blockquote>
<p>可将其设置为启动<code>bash</code>，自动进入<code>linux</code>子系统。</p>
<p><img src="https://yg0070.github.io/images/image-20200119100748706.png" alt="image-20200119100748706"></p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>工具</tag>
        <tag>WLS</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2020/03/31/docker/</url>
    <content><![CDATA[<p> <a href="https://www.cnblogs.com/hongdada/p/11512901.html" target="_blank" rel="noopener">https://www.cnblogs.com/hongdada/p/11512901.html</a> </p>
]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/12/05/git/</url>
    <content><![CDATA[<h2 id="git提交后退回"><a href="#git提交后退回" class="headerlink" title="git提交后退回"></a>git提交后退回</h2><h4 id="已commit-未push"><a href="#已commit-未push" class="headerlink" title="已commit 未push"></a>已commit 未push</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="已push"><a href="#已push" class="headerlink" title="已push"></a>已push</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">强制提交</span><br><span class="line">git push origin dev -f</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo命令</title>
    <url>/2019/12/13/hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="1-创建文章"><a href="#1-创建文章" class="headerlink" title="1.创建文章"></a>1.创建文章</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">布局(layout)</th>
<th align="center">存储路径</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">post</td>
<td align="center">source/_posts</td>
<td align="center">默认, 可以直接发布</td>
</tr>
<tr>
<td align="center">page</td>
<td align="center">source</td>
<td align="center">在source下新建一个文件夹</td>
</tr>
<tr>
<td align="center">draft</td>
<td align="center">source/_drafts</td>
<td align="center">新建文件将保存到_drafts中</td>
</tr>
</tbody></table>
<h5 id="2-删除编译文件-清除缓存"><a href="#2-删除编译文件-清除缓存" class="headerlink" title="2.删除编译文件,清除缓存"></a>2.删除编译文件,清除缓存</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h5 id="3-生成并发布"><a href="#3-生成并发布" class="headerlink" title="3.生成并发布"></a>3.生成并发布</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g[generate] -d[deploy]</span><br></pre></td></tr></table></figure>

<p><code>generate</code>命令重新编译文件</p>
<p><code>deploy</code>在本地生成 <code>.deploy_git</code>文件夹, 将编译后的文件上传至 GitHub </p>
<h5 id="4-本地运行"><a href="#4-本地运行" class="headerlink" title="4.本地运行"></a>4.本地运行</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s[server]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>spring securityty详解</title>
    <url>/2019/12/13/spring-securityty%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h5 id="1-security与oauth2的关系"><a href="#1-security与oauth2的关系" class="headerlink" title="1. security与oauth2的关系"></a>1. security与oauth2的关系</h5><p><code>security</code>是一个安全访问控制解决方案的框架,对访问访问权限进行控制,包括了用户认证-鉴权<code>(Authentication)</code>和用户授权<code>(Authorization)</code>两个部分.用户认证就是验证用户”是谁”,是否是此系统的合法用户.通常使用用户名密码来完成.授权发生在鉴权后,是鉴定用户”是否可以”执行某个操作.</p>
<h5 id="2-spring-security主要类详解"><a href="#2-spring-security主要类详解" class="headerlink" title="2. spring security主要类详解"></a>2. spring security主要类详解</h5><p><code>spring security</code>主要分为两大块 , <code>security</code>为主的授权,鉴权;<code>security</code>实现的<code>OAuth2</code>协议的第三方应用授权.</p>
<p><code>security</code>的最主要的类</p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>AbstractAuthenticationProcessingFilter</code></td>
<td align="center">根拦截器 所有请求都会先进这个拦截器</td>
</tr>
<tr>
<td align="center"><code>ExceptionTranslationFilter</code></td>
<td align="center">异常拦截器</td>
</tr>
<tr>
<td align="center"><code>AbstractAuthenticationProcessingFilter</code></td>
<td align="center">认证拦截器父类</td>
</tr>
<tr>
<td align="center"><code>UsernamePasswordAuthenticationFilter</code></td>
<td align="center">默认的用户名密码认证拦截器</td>
</tr>
<tr>
<td align="center"><code>ProviderManager</code></td>
<td align="center">管理所有认证方法</td>
</tr>
<tr>
<td align="center"><code>AuthenticationProvider</code></td>
<td align="center">认证方法的父类</td>
</tr>
</tbody></table>
<p> <code>AbstractAuthenticationProcessingFilter</code>类负责认证, 即登录, 内部调用<code>ProviderManager</code>,<code>ProviderManager</code>根据配置决定调用哪个<code>AuthenticationProvider</code></p>
<p><code>OAuth2</code>的主要类</p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>AuthorizationEndpoint</code></td>
<td align="center">oauth/authorize方法入口</td>
</tr>
<tr>
<td align="center"><code>TokenEndpoint</code></td>
<td align="center">oauth/token方法入口</td>
</tr>
<tr>
<td align="center"><code>CompositeTokenGranter</code></td>
<td align="center">遍历各个认证模式</td>
</tr>
<tr>
<td align="center"><code>AbstractTokenGranter</code></td>
<td align="center">验证认证模式与调用</td>
</tr>
<tr>
<td align="center"><code>ResourceOwnerPasswordTokenGranter</code></td>
<td align="center">password认证模式类</td>
</tr>
</tbody></table>
<p>拦截器执行顺序</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Filter Class</th>
<th>Namespace Element or Attribute</th>
</tr>
</thead>
<tbody><tr>
<td>CHANNEL_FILTER</td>
<td><code>ChannelProcessingFilter</code></td>
<td><code>http/intercept-url@requires-channel</code></td>
</tr>
<tr>
<td>SECURITY_CONTEXT_FILTER</td>
<td><code>SecurityContextPersistenceFilter</code></td>
<td><code>http</code></td>
</tr>
<tr>
<td>CONCURRENT_SESSION_FILTER</td>
<td><code>ConcurrentSessionFilter</code></td>
<td><code>session-management/concurrency-control</code></td>
</tr>
<tr>
<td>HEADERS_FILTER</td>
<td><code>HeaderWriterFilter</code></td>
<td><code>http/headers</code></td>
</tr>
<tr>
<td>CSRF_FILTER</td>
<td><code>CsrfFilter</code></td>
<td><code>http/csrf</code></td>
</tr>
<tr>
<td>LOGOUT_FILTER</td>
<td><code>LogoutFilter</code></td>
<td><code>http/logout</code></td>
</tr>
<tr>
<td>X509_FILTER</td>
<td><code>X509AuthenticationFilter</code></td>
<td><code>http/x509</code></td>
</tr>
<tr>
<td>PRE_AUTH_FILTER</td>
<td><code>AbstractPreAuthenticatedProcessingFilter</code> Subclasses</td>
<td>N/A</td>
</tr>
<tr>
<td>CAS_FILTER</td>
<td><code>CasAuthenticationFilter</code></td>
<td>N/A</td>
</tr>
<tr>
<td>FORM_LOGIN_FILTER</td>
<td><code>UsernamePasswordAuthenticationFilter</code></td>
<td><code>http/form-login</code></td>
</tr>
<tr>
<td>BASIC_AUTH_FILTER</td>
<td><code>BasicAuthenticationFilter</code></td>
<td><code>http/http-basic</code></td>
</tr>
<tr>
<td>SERVLET_API_SUPPORT_FILTER</td>
<td><code>SecurityContextHolderAwareRequestFilter</code></td>
<td><code>http/@servlet-api-provision</code></td>
</tr>
<tr>
<td>JAAS_API_SUPPORT_FILTER</td>
<td><code>JaasApiIntegrationFilter</code></td>
<td><code>http/@jaas-api-provision</code></td>
</tr>
<tr>
<td>REMEMBER_ME_FILTER</td>
<td><code>RememberMeAuthenticationFilter</code></td>
<td><code>http/remember-me</code></td>
</tr>
<tr>
<td>ANONYMOUS_FILTER</td>
<td><code>AnonymousAuthenticationFilter</code></td>
<td><code>http/anonymous</code></td>
</tr>
<tr>
<td>SESSION_MANAGEMENT_FILTER</td>
<td><code>SessionManagementFilter</code></td>
<td><code>session-management</code></td>
</tr>
<tr>
<td>EXCEPTION_TRANSLATION_FILTER</td>
<td><code>ExceptionTranslationFilter</code></td>
<td><code>http</code></td>
</tr>
<tr>
<td>FILTER_SECURITY_INTERCEPTOR</td>
<td><code>FilterSecurityInterceptor</code></td>
<td><code>http</code></td>
</tr>
<tr>
<td>SWITCH_USER_FILTER</td>
<td><code>SwitchUserFilter</code></td>
<td>N/A</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>代码</tag>
        <tag>spring</tag>
        <tag>spring security</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 开机选择是否开启hyper</title>
    <url>/2019/12/24/windows-%E5%BC%80%E6%9C%BA%E9%80%89%E6%8B%A9%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AFhyper/</url>
    <content><![CDATA[<p>Windows 10中hyper虚拟化与VMware无法共存, 不得已采用一种折中方法, 相当于双系统, 但不需要重新装系统, 只需要配置一下就可以, 然后在开机的时候选择是否需要用hyper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bcdedit /copy &#123;default&#125; /d &quot;Windows 10 Without Hyper-V&quot; </span><br><span class="line"></span><br><span class="line"># 执行完第一条命令会得到一串id, 把id替换到第二条命令中的xxxxx后执行下一条</span><br><span class="line"></span><br><span class="line">bcdedit /set &#123;xxxxx&#125; hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Session 跨域时 Cookie SameSite 问题</title>
    <url>/2020/04/10/Spring%20Session%20%E8%B7%A8%E5%9F%9F%E6%97%B6%20Cookie%20SameSite%20%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p> <code>SameSite</code>是一种新的<code>cookie</code>属性值，用来防止<code>CSRF</code>攻击，具体可看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</span><br></pre></td></tr></table></figure>

<p>它有两个属性</p>
<p><code>Strict</code>：严格模式，完全禁止第三方 <code>Cookie</code>，跨站点时，任何情况下都不会发送 <code>Cookie</code>。</p>
<p><code>Lax</code>：宽松模式，允许<code>Get</code>请求的第三方<code>Cookie</code>，其他请求依然禁止。</p>
<p><code>Spring-session</code> 默认把<code>SameSite</code>设置成Lat，使用<code>spring session</code>进行<code>session</code>管理，当其他系统需要跨域请求这个系统时就会出现每一次请求的<code>SESIONID</code>都会变得情况。</p>
<p>需要对生成的<code>cookie</code>进行修改，去掉<code>SameSite</code>属性或者改为<code>None</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CookieSerializer <span class="title">httpSessionIdResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">       DefaultCookieSerializer cookieSerializer = <span class="keyword">new</span> DefaultCookieSerializer();</span><br><span class="line">       cookieSerializer.setCookieName(<span class="string">"token"</span>);</span><br><span class="line">       cookieSerializer.setUseHttpOnlyCookie(<span class="keyword">false</span>);</span><br><span class="line">       cookieSerializer.setSameSite(<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>spring session</category>
      </categories>
      <tags>
        <tag>代码</tag>
        <tag>spring</tag>
        <tag>框架</tag>
        <tag>spring session</tag>
      </tags>
  </entry>
</search>
